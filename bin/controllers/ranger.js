// Generated by CoffeeScript 1.6.3
(function() {
  var Base, Item, Items, Pane, Panes, Ranger, template, vent,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Base = require('base');

  vent = new Base.Event();

  template = {
    pane: require('../views/pane'),
    item: require('../views/item')
  };

  Panes = require('../controllers/panes')(vent, template.pane);

  Items = require('../controllers/items')(vent, template.item);

  Pane = require('../models/pane');

  Item = require('../models/item');

  Ranger = (function(_super) {
    __extends(Ranger, _super);

    function Ranger() {
      this.open = __bind(this.open, this);
      this.left = __bind(this.left, this);
      this.right = __bind(this.right, this);
      this.down = __bind(this.down, this);
      this.up = __bind(this.up, this);
      this.selectFirst = __bind(this.selectFirst, this);
      this.loadRaw = __bind(this.loadRaw, this);
      this.remove = __bind(this.remove, this);
      this.addOne = __bind(this.addOne, this);
      this.recheck = __bind(this.recheck, this);
      this.selectItem = __bind(this.selectItem, this);
      this.selectPane = __bind(this.selectPane, this);
      Ranger.__super__.constructor.apply(this, arguments);
      this.current = {
        pane: null,
        item: null
      };
      this.panes = new Pane();
      this.panes.on('create:model show', this.addOne);
      this.panes.on('before:destroy:model', this.remove);
      vent.on('select:item', this.selectItem);
      vent.on('select:pane', this.selectPane);
    }

    Ranger.prototype.selectPane = function(pane) {
      this.current.pane = pane;
      return this.el.find('.active.pane').removeClass('active');
    };

    Ranger.prototype.selectItem = function(item, pane) {
      this.current.item = item;
      this.recheck(pane);
      if (!item.child) {
        return;
      }
      return this.panes.trigger('show', item.child);
    };

    Ranger.prototype.recheck = function(pane) {
      var _this = this;
      return pane.contents.forEach(function(item) {
        if (!item.child) {
          return;
        }
        item.child.trigger('remove');
        return _this.recheck(item.child);
      });
    };

    Ranger.prototype.addOne = function(pane) {
      var view;
      view = new Panes({
        pane: pane
      });
      return this.el.append(view.render().el);
    };

    Ranger.prototype.remove = function(pane) {
      pane.trigger('remove');
      return this.recheck(pane);
    };

    Ranger.prototype.loadRaw = function(array, panes) {
      var i, id, item, key, length, main, map, out, title, x, _base, _i, _j, _len, _len1, _ref;
      if (this.panes.length > 0) {
        this.panes.get(0).destroy();
      }
      map = {};
      main = {};
      length = panes.length - 1;
      for (_i = 0, _len = array.length; _i < _len; _i++) {
        item = array[_i];
        out = main;
        x = '';
        for (i = _j = 0, _len1 = panes.length; _j < _len1; i = ++_j) {
          _ref = panes[i], title = _ref[0], key = _ref[1];
          x += title + ':' + item[key] + ':';
          out.title = title;
          if (out.contents == null) {
            out.contents = [];
          }
          if (map[x] === void 0) {
            id = out.contents.push({
              title: item[key]
            }) - 1;
            map[x] = out.contents[id];
          }
          if (i !== length) {
            out = (_base = map[x]).child != null ? (_base = map[x]).child : _base.child = {};
          } else {
            map[x].data = item;
          }
        }
      }
      return this.panes.create(main);
    };

    Ranger.prototype.selectFirst = function() {
      var item, pane;
      pane = this.panes.first();
      item = pane.contents.first();
      return pane.contents.trigger('click:item', item);
    };

    Ranger.prototype.up = function() {
      if (!this.current.pane) {
        return this.selectFirst();
      }
      return this.current.pane.trigger('move:up');
    };

    Ranger.prototype.down = function() {
      if (!this.current.pane) {
        return this.selectFirst();
      }
      return this.current.pane.trigger('move:down');
    };

    Ranger.prototype.right = function() {
      if (!this.current.pane) {
        return;
      }
      return this.current.pane.trigger('move:right');
    };

    Ranger.prototype.left = function() {
      var item, pane, _ref;
      if (!((_ref = this.current.pane) != null ? _ref.parent : void 0)) {
        return;
      }
      item = this.current.pane.parent;
      pane = item.collection;
      return pane.trigger('click:item', item);
    };

    Ranger.prototype.open = function() {
      return this.current.item.data;
    };

    return Ranger;

  })(Base.Controller);

  module.exports = Ranger;

}).call(this);
